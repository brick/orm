#!/usr/bin/env php
<?php

declare(strict_types=1);

/**
 * This script builds the class metadata, repositories and proxies.
 * It must be called after every configuration change, or entity property change.
 *
 * The only argument to this script is the path to a PHP file that returns a Configuration instance.
 */

use Brick\ORM\ClassMetadata;
use Brick\ORM\ClassMetadataBuilder;
use Brick\ORM\Configuration;
use Brick\ORM\ProxyBuilder;
use Brick\ORM\RepositoryBuilder;

// Include the autoloader

(function() {
    $possibleVendorLocations = array(
        '..',         // when used in its original location during development, in bin/
        '../../../..' // when used from a Composer vendor directory, in vendor/brick/orm/bin/
    );

    $found = false;
    foreach ($possibleVendorLocations as $location) {
        $autoloader = __DIR__ . '/' . $location . '/vendor/autoload.php';
        if (is_readable($autoloader)) {
            require $autoloader;
            $found = true;
            break;
        }
    }

    if (! $found) {
        echo 'Could not find the vendor/autoload.php file.', PHP_EOL;
        echo 'Did you install your dependencies using Composer?', PHP_EOL;
        exit(1);
    }

})();

if ($argc !== 2) {
    echo "Usage: {$argv[0]} path/to/configuration.php", PHP_EOL;
    exit(1);
}

// Start building

(function(string $path) {
    /** @var Configuration $configuration */
    $configuration = require $path;

    // Build class metadata for all entity classes

    /** @var ClassMetadata[] $classMetadata */
    $classMetadata = (function() use ($configuration) {
        $builder = new ClassMetadataBuilder($configuration);
        $classMetadata = $builder->build();

        $php = '<?php return unserialize(' . var_export(serialize($classMetadata), true) . ");\n";

        $path = $configuration->getClassMetadataFile();
        echo $path, PHP_EOL;

        file_put_contents($path, $php);

        return $classMetadata;
    })();

    // Build repositories for all aggregate roots

    (function() use ($configuration, $classMetadata) {
        foreach ($configuration->getEntities() as $className => $entityConfiguration) {
            if ($entityConfiguration->getBelongsTo() !== null) {
                // Only generate repositories for aggregate roots.
                continue;
            }

            $builder = new RepositoryBuilder();
            $builder->setRepositoryNamespace($configuration->getRepositoryNamespace($className));
            $builder->setEntityClassName($className);

            $identityProps = [];

            foreach ($classMetadata[$className]->idProperties as $idProperty) {
                $type = $classMetadata[$className]->propertyMappings[$idProperty]->getType();

                if ($type === null) {
                    throw new \LogicException('An identity property cannot be mapped to a mixed type.');
                }

                $identityProps[$idProperty] = $type;
            }

            $builder->setIdentityProps($identityProps);

            $path = $configuration->getRepositoryFileName($className);
            echo $path, PHP_EOL;

            @mkdir(dirname($path), 0777, true);
            file_put_contents($path, $builder->build());
        }
    })();

    // Build proxies for all non-abstract entity classes

    (function() use ($configuration, $classMetadata) {
        foreach ($configuration->getEntities() as $entityConfiguration) {
            foreach ($entityConfiguration->getClassHierarchy() as $concreteClassName) {
                $reflectionClass = new \ReflectionClass($concreteClassName);

                if ($reflectionClass->isAbstract()) {
                    continue;
                }

                $builder = new ProxyBuilder();
                $builder->setProxyNamespace($configuration->getProxyNamespace($concreteClassName));
                $builder->setEntityClassName($concreteClassName);
                $builder->setNonIdProps($classMetadata[$concreteClassName]->nonIdProperties);

                $path = $configuration->getProxyFileName($concreteClassName);

                echo $path, PHP_EOL;

                @mkdir(dirname($path), 0777, true);
                file_put_contents($path, $builder->build());
            }
        }
    })();
})($argv[1]);

echo 'Success.', PHP_EOL;
